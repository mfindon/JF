#region Prolog

################################################################
#                    Creates all posible variance consolidations in Verison dimension
################################################################

sDimName = 'Version';

sTopConsol = 'All Variances';

nElem1 = 1;

WHILE ( nElem1 <= DIMSIZ ( sDimName ) );
   sElem1 = DIMNM ( sDimName, nElem1 );
   sType = DTYPE ( sDimName, sElem1 );
   IF ( sType @= 'C' & 
      ( SCAN ( ' v ', sElem1 ) <> 0 % SUBST ( sElem1, LONG ( sElem1 ), 1 ) @= '%' ) );
      DimensionElementDelete( sDimName, sElem1 );
   ELSE;
      nElem1 = nElem1 + 1;
   ENDIF;
END;

DimensionElementInsert(sDimName, '', sTopConsol, 'C');


nElem1 = 1;

WHILE ( nElem1 <= DIMSIZ ( sDimName ) );

   sElem1 = DIMNM ( sDimName, nElem1 );

   IF ( ELLEV ( sDimName, sElem1 ) = 0 );

      nElem2 = 1;

      WHILE ( nElem2 <= DIMSIZ ( sDimName ) );

         sElem2 = DIMNM ( sDimName, nElem2 );

             IF ( ELLEV ( sDimName, sElem2 ) = 0 );

               sVarConsole = sElem1 | ' v ' | sElem2;

               #Create vs consolidation
               DimensionElementInsert(sDimName, '', sVarConsole, 'C');

               DimensionElementComponentAdd(sDimName, sTopConsol, sVarConsole, 0);
               DimensionElementComponentAdd(sDimName, sVarConsole, sElem1, 1);
               DimensionElementComponentAdd(sDimName, sVarConsole, sElem2, -1);

               #Create vs % consolidation
               DimensionElementInsert(sDimName, '', sVarConsole | ' %', 'C');

               DimensionElementComponentAdd(sDimName, sTopConsol, sVarConsole | ' %', 0);
               DimensionElementComponentAdd(sDimName, sVarConsole | ' %', sVarConsole, 1);
               DimensionElementComponentAdd(sDimName, sVarConsole | ' %', sElem2, 1);

            ENDIF;

         nElem2 = nElem2 + 1;

      END;

   ENDIF;

   nElem1 = nElem1 + 1;

END;



#endregion