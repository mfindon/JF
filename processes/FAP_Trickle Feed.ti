#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


####################################################################
#          Query FAP trickle feed table to see what compnaies / periods have changed
#####################################################################

sDataSourceConfigCube = 'FAP Config' ;

sODBC = CELLGETS ( sDataSourceConfigCube, 'Value', 'FAP ODBC Connection Name' );
sUserId = CELLGETS ( sDataSourceConfigCube, 'Value', 'FAP DB Username' );
sPasswd = CELLGETS ( sDataSourceConfigCube, 'Value', 'FAP DB Password'  );
sDataMart = CELLGETS ( sDataSourceConfigCube, 'Value', 'FAP Datamart' );

DataSourceType='ODBC'; 
DatasourceNameForServer = sODBC;
DatasourceUserName = sUserId ; 
DatasourcePassword = sPasswd ;


sActualityDim = 'F_ActualityMonthly';
sPeriodDim = 'F_PeriodMonthly';
sCompanyDim = 'F_Company';

pSequence = NumberToString ( CellGetN ( 'FAP Status', 'Value', 'Last Sequence No' ) );
nMaxSequence = CellGetN ( 'FAP Status', 'Value', 'Last Sequence No' );

sActualalityMDX = '';
sPeriodMDX = '';
sCompanyMDX = '';

sLastActulality = '';
sLastCompany = '';
sLastPeriod = '';

nRow = 0;

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****


IF ( DIMIX ( sPeriodDim, vPeriod ) = 0 );  Itemskip; ENDIF;
IF ( DIMIX ( sActualityDim, vActuality ) = 0 );  ItemSkip; ENDIF;

nRow = nRow + 1;

IF ( vActuality @<> sLastActulality );
IF ( nRow > 1 );
   #sActualalityMDX = sActualalityMDX | ' }';
   sPeriodMDX = sPeriodMDX | ' }';
   sCompanyMDX = sCompanyMDX | ' }';
   IF ( LONG ( sPeriodMDX) > 500 ); sPeriodMDX = ''; ENDIF; 
   IF ( LONG ( sCompanyMDX ) > 500 ); sCompanyMDX = ''; ENDIF; 
   ExecuteProcess ( 'Cube FAP to Reporting', 'pMDXPeriod', sPeriodMDX, 'pMDXCompany', sCompanyMDX, 'pMDXActuality', sActualalityMDX , 'pSeq', NumberToString ( nRow ) );
ENDIF;

sActualalityMDX = '{[' | sActualityDim | '].[' | vActuality | ']}';
sPeriodMDX = ' {[' | sPeriodDim | '].[' | vPeriod  | ']';
sCompanyMDX = ' {[' | sCompanyDim | '].[' | vCompany | ']';

ELSE;

#sActualalityMDX = sActualalityMDX | ', ' | vActuality ;
IF ( sLastPeriod @<> vPeriod ); sPeriodMDX = sPeriodMDX | ',[' | sPeriodDim | '].[' | vPeriod  | ']'; ENDIF;
IF ( sLastCompany @<> vCompany );  sCompanyMDX = sCompanyMDX | ',[' | sCompanyDim | '].[' | vCompany | ']'; ENDIF;

ENDIF;

sLastActulality = vActuality;
sLastCompany = vCompany;
sLastPeriod = vPeriod;

nMaxSequence = MAX ( nMaxSequence, StringToNumber ( vSeq ) );
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


IF ( nRow > 0 );

   LogOutput ( 'INFO', 'FAP Trickle Sequence No Start: ' | pSequence ) ;

   nRow = nRow + 1;
   sPeriodMDX = sPeriodMDX | '}';
   sCompanyMDX = sCompanyMDX | '}';
   IF ( LONG ( sPeriodMDX ) > 500 ); sPeriodMDX = ''; ENDIF; 
   IF ( LONG ( sCompanyMDX ) > 500 ); sCompanyMDX = ''; ENDIF; 

   LogOutput ( 'INFO', 'FAP Periods: ' | sPeriodMDX );
   LogOutput ( 'INFO', 'FAP sCompanies: ' | sCompanyMDX );
   LogOutput ( 'INFO', 'FAP Actualities: ' | sActualalityMDX ) ;

   ExecuteProcess ( 'Cube FAP to Reporting', 'pMDXPeriod', sPeriodMDX, 'pMDXCompany', sCompanyMDX, 'pMDXActuality', sActualalityMDX , 'pSeq', NumberToString ( nRow ) );

   #Store latest sequence Number
   CellPutN ( nMaxSequence , 'FAP Status', 'Value', 'Last Sequence No' );
   CellPutS ( TIMST ( NOW(), '\Y-\m-\d \h:\i:\s' ) , 'FAP Status', 'Value', 'Last Trickle Feed Update' );

   LogOutput ( 'INFO', 'FAP Trickle Sequence No End: ' | NumberToString ( nMaxSequence ) ) ;

ENDIF;
#endregion